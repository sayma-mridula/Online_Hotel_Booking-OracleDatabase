
-- Query 1: Display details of a specific hotel from the Hotels table
SET SERVEROUTPUT ON;
DECLARE 
    hotel_id Hotels.HotelID%TYPE;
    hotel_name Hotels.HotelName%TYPE;
    location Hotels.Location%TYPE;
    description Hotels.Discription%TYPE;
    rating Hotels.Rating%TYPE;
    contact_info Hotels.ContactInfo%TYPE;
BEGIN
    SELECT HotelID, HotelName, Location, Discription, Rating, ContactInfo INTO hotel_id, hotel_name, location, description, rating, contact_info FROM Hotels WHERE HotelID = 200001; 

    DBMS_OUTPUT.PUT_LINE('HotelID: ' || hotel_id || ' HotelName: ' || hotel_name || ' Location: ' || location || ' Description: ' || description || ' Rating: ' || rating || ' ContactInfo: ' || contact_info);
END;
/


-- Query 2: Insert a new record into the Hotels table
SET SERVEROUTPUT ON;
DECLARE 
    hotel_id Hotels.HotelID%TYPE := 200012; 
    hotel_name Hotels.HotelName%TYPE := 'Adventure Inn';
    location Hotels.Location%TYPE := 'Alaska';
    description Hotels.Discription%TYPE := 'Cozy lodge with beautiful mountain views';
    rating Hotels.Rating%TYPE := 4.7;
    contact_info Hotels.ContactInfo%TYPE := '987-654-3210';
BEGIN
    INSERT INTO Hotels VALUES(hotel_id, hotel_name, location, description, rating, contact_info);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Record inserted successfully: HotelID: ' || hotel_id);
END;
/


-- Query 3: Fetch details of a specific hotel from the Hotels table into a rowtype variable
SET SERVEROUTPUT ON;
DECLARE 
    hotel_row Hotels%ROWTYPE;
BEGIN
    SELECT * INTO hotel_row FROM Hotels WHERE HotelID = 200001;  

    DBMS_OUTPUT.PUT_LINE('HotelID: ' || hotel_row.HotelID || ', HotelName: ' || hotel_row.HotelName || ', Location: ' || hotel_row.Location || ', Description: ' || hotel_row.Discription || ', Rating: ' || hotel_row.Rating || ', ContactInfo: ' || hotel_row.ContactInfo);
END;
/


-- Query 4: Fetch and display all records from the Hotels table using a cursor
SET SERVEROUTPUT ON;
DECLARE 
    cursor hotel_cursor IS SELECT * FROM Hotels;
    hotel_row Hotels%ROWTYPE;
BEGIN
    OPEN hotel_cursor;
    FETCH hotel_cursor INTO hotel_row;
    WHILE hotel_cursor%FOUND LOOP
        DBMS_OUTPUT.PUT_LINE('HotelID: ' || hotel_row.HotelID || ', HotelName: ' || hotel_row.HotelName || ', Location: ' || hotel_row.Location || ', Description: ' || hotel_row.Discription || ', Rating: ' || hotel_row.Rating || ', ContactInfo: ' || hotel_row.ContactInfo);
        DBMS_OUTPUT.PUT_LINE('Row count: ' || hotel_cursor%ROWCOUNT);
        FETCH hotel_cursor INTO hotel_row;
    END LOOP;
    CLOSE hotel_cursor;
END;
/


-- Query 5: Fetch hotel names into an array and display them using PL/SQL
SET SERVEROUTPUT ON;
DECLARE 
  counter NUMBER;
  hotel_name Hotels.HotelName%TYPE;
  TYPE HOTELNAMEARRAY IS VARRAY(5) OF Hotels.HotelName%TYPE; 
  A_HOTELNAME HOTELNAMEARRAY := HOTELNAMEARRAY();
BEGIN
  counter := 1;
  -- Assuming HotelID range from some specific IDs
  FOR x IN 200001..200005 LOOP
    SELECT HotelName INTO hotel_name FROM Hotels WHERE HotelID = x;
    A_HOTELNAME.EXTEND();
    A_HOTELNAME(counter) := hotel_name;
    counter := counter + 1;
  END LOOP;
  
  counter := 1;
  WHILE counter <= A_HOTELNAME.COUNT LOOP
    DBMS_OUTPUT.PUT_LINE(A_HOTELNAME(counter)); 
    counter := counter + 1;
  END LOOP;
END;
/


-- Query 5: Update and Display Hotel Names from Hotels Table Using a VARRAY
DECLARE 
   counter NUMBER := 1;
   hotel_name2 Hotels.HotelName%TYPE;
   TYPE HOTELNAMEARRAY IS VARRAY(5) OF Hotels.HotelName%TYPE;
   A_HOTELNAME HOTELNAMEARRAY := HOTELNAMEARRAY('Grand Plaza', 'Sea Breeze Resort', 'Mountain Retreat', 'Urban Hotel', 'Sunset Villas'); 
   -- VARRAY with a fixed size of 5 elements and initialized with preliminary hotel names
BEGIN
   counter := 1;
   FOR x IN 200001..200005  
   LOOP
      SELECT HotelName INTO hotel_name2 FROM Hotels WHERE HotelID = x;
      A_HOTELNAME(counter) := hotel_name2;
      counter := counter + 1;
   END LOOP;
   counter := 1;
   WHILE counter <= A_HOTELNAME.COUNT 
   LOOP 
      DBMS_OUTPUT.PUT_LINE(A_HOTELNAME(counter)); 
      counter := counter + 1;
   END LOOP;
END;



-- Query 6: Categorize hotels based on their rating and display category messages
DECLARE 
   counter NUMBER := 1;
   hotel_name Hotels.HotelName%TYPE;
   hotel_rating Hotels.Rating%TYPE;
   TYPE HOTELNAMEARRAY IS VARRAY(5) OF Hotels.HotelName%TYPE;
   A_HOTELNAME HOTELNAMEARRAY := HOTELNAMEARRAY('Grand Plaza', 'Sea Breeze Resort', 'Mountain Retreat', 'Urban Hotel', 'Sunset Villas'); 
   -- VARRAY with a fixed size of 5 elements and initialized with preliminary hotel names
BEGIN
   counter := 1;
   FOR x IN 200001..200005  
   LOOP
      SELECT HotelName, Rating INTO hotel_name, hotel_rating FROM Hotels WHERE HotelID = x;
      IF hotel_rating >= 4.5 THEN
        DBMS_OUTPUT.PUT_LINE(hotel_name || ' is a ' || 'premium quality hotel');
      ELSIF hotel_rating >= 4.0 THEN
        DBMS_OUTPUT.PUT_LINE(hotel_name || ' is a ' || 'high quality hotel');
      ELSE
        DBMS_OUTPUT.PUT_LINE(hotel_name || ' is a ' || 'standard quality hotel');
      END IF;
   END LOOP;
END;



-- Query 7: -- Create or Replace Procedure to Fetch Hotel Name based on HotelID and Modify a Numeric Value
CREATE OR REPLACE PROCEDURE GetHotelDetails(
  hotel_id IN NUMBER,
  hotel_name OUT VARCHAR2,
  next_id IN OUT NUMBER
)
AS
  t_show CHAR(30);
BEGIN
  t_show := 'From procedure: ';
  SELECT HotelName INTO hotel_name FROM Hotels WHERE HotelID = hotel_id;
  next_id := hotel_id + 1;
  DBMS_OUTPUT.PUT_LINE(t_show || hotel_name || ' ID is ' || hotel_id || ' Next ID: ' || next_id);
END;
/


SET SERVEROUTPUT ON;
DECLARE 
  hotel_id Hotels.HotelID%TYPE := 200001; 
  hotel_name Hotels.HotelName%TYPE;
  next_id NUMBER;
BEGIN
  GetHotelDetails(hotel_id, hotel_name, next_id);
END;
/



-- Query 8: Create or Replace Function to Fetch Hotel Name by HotelID
SET SERVEROUTPUT ON;
CREATE OR REPLACE FUNCTION GetHotelName(var1 IN NUMBER) RETURN VARCHAR2 AS
  hotel_name Hotels.HotelName%TYPE;
BEGIN
  SELECT HotelName INTO hotel_name FROM Hotels WHERE HotelID = var1;
  RETURN hotel_name;
END;
/

SET SERVEROUTPUT ON;
DECLARE 
  hotel_name_value VARCHAR2(50);
BEGIN
  hotel_name_value := GetHotelName(200001); 
  DBMS_OUTPUT.PUT_LINE('Hotel Name: ' || hotel_name_value);
END;
/



-- Query 9: Create or Replace Trigger to Handle Cascade Deletions with Bookings
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER BookingCascadeDelete
BEFORE DELETE ON Bookings
REFERENCING OLD AS o NEW AS n
FOR EACH ROW
BEGIN
  DELETE FROM Payments WHERE BookingID = :o.BookingID;
  DELETE FROM Reviews WHERE BookingID = :o.BookingID;
END;
/


-- Query 10: Create or Replace Trigger to Update Booking Details After Room Update
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER UpdateBookingDetails
AFTER UPDATE ON Rooms
REFERENCING OLD AS o NEW AS n
FOR EACH ROW
ENABLE
BEGIN
 UPDATE Bookings
 SET CheckInDate = (CASE WHEN :n.Price != :o.Price THEN 'Check new prices' ELSE CheckInDate END)
 WHERE RoomID = :o.RoomID;
END;
/
 













